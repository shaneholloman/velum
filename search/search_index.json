{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"velum","text":"<p>A Python project template with a focus on simplicity and ease of use. It includes a CI/CD pipeline, pre-commit hooks, and a set of tools to help you get started quickly.</p>"},{"location":"#purpose-of-this-template","title":"Purpose of This Template","text":"<p>This repository serves two purposes:</p> <ol> <li> <p>Project Template: The primary purpose is to provide a complete, ready-to-use project structure for Python applications with best practices already configured.</p> </li> <li> <p>Pipeline Demonstration: The included minimal package demonstrates that the CI/CD pipeline, documentation, and publishing workflows function correctly.</p> </li> </ol> <p>When published to PyPI, the template itself becomes a minimal package. You should replace this placeholder code with your actual application while keeping the project structure.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#creating-a-new-repository-from-this-template","title":"Creating a New Repository from this Template","text":"<p>This repository is set up as a GitHub template. To use it:</p> <ol> <li>Click the \"Use this template\" button at the top of the repository page</li> <li>Name your new repository</li> <li>Clone your newly created repository</li> </ol> <p>The included sample application (<code>velum</code>) is a proof of concept that demonstrates the pipeline functionality. Simply replace it with your own application code while keeping the project structure, and the CI/CD pipeline will work seamlessly.</p>"},{"location":"#development-setup","title":"Development Setup","text":"<ol> <li>IMPORTANT: First Required Step After Cloning</li> </ol> <p>Always run the following command immediately after cloning this template:</p> <pre><code>make install\n</code></pre> <p>This critical step:</p> <ul> <li>Installs the virtual environment with <code>uv sync</code></li> <li>Sets up pre-commit hooks that automatically fix formatting issues when committing</li> <li>Generates your <code>uv.lock</code> file</li> </ul> <p>Without this step, pre-commit hooks won't run automatically when committing via terminal or VSCode.</p> <ol> <li>Run the pre-commit hooks to resolve potential formatting issues:</li> </ol> <pre><code>uv run pre-commit run -a\n</code></pre> <ol> <li>Commit the changes:</li> </ol> <pre><code>git add .\ngit commit -m 'Fix formatting issues'\ngit push origin main\n</code></pre>"},{"location":"#setting-up-pypi-publishing","title":"Setting up PyPI Publishing","text":"<p>To publish your package to PyPI:</p> <ol> <li>Create an API Token on PyPI</li> <li>Add the token to your repository using the GitHub CLI:</li> </ol> <pre><code>gh secret set PYPI_TOKEN -b \"your-pypi-token-here\"\n</code></pre> <ol> <li>When creating a release on GitHub, the workflow will automatically publish your package to PyPI</li> </ol>"},{"location":"#setting-up-github-pages-documentation","title":"Setting up GitHub Pages Documentation","text":"<p>To enable automatic documentation deployment:</p> <ol> <li>Go to your repository's Settings \u2192 Pages</li> <li> <p>Under \"Build and deployment\":</p> </li> <li> <p>Set \"Source\" to \"Deploy from a branch\"</p> </li> <li>Set \"Branch\" to \"gh-pages\"</li> <li>Set \"Directory\" to \"/\" (root)</li> <li>Click \"Save\"</li> </ol> <p>Important: Do not select the \"docs\" directory as the source - the deployment workflow is configured to use the root directory of the gh-pages branch.</p>"},{"location":"#working-with-documentation-locally","title":"Working with Documentation Locally","text":"<p>You can preview the documentation locally by running:</p> <pre><code>uv run mkdocs serve\n</code></pre> <p>This will start a local server at http://127.0.0.1:8000/ where you can preview your documentation as you work on it.</p>"},{"location":"#releasing-a-new-version","title":"Releasing a New Version","text":"<ul> <li>Create an API Token on PyPI if you haven't already</li> <li>Add the API Token to your project's secrets with the name <code>PYPI_TOKEN</code></li> <li>Create a new release on GitHub using the GitHub CLI:</li> </ul> <pre><code>gh release create 0.1.0 --title \"0.1.0\" --generate-notes\n</code></pre> <p>This automatically creates both the release and a tag in one step.</p> <p>The release workflow will automatically:</p> <ol> <li>Update the version in your project files</li> <li>Build the package</li> <li>Publish to PyPI</li> <li>Deploy updated documentation</li> </ol> <p>For more details on the CI/CD process, see here.</p>"},{"location":"modules/","title":"velum Modules","text":""},{"location":"modules/#velum.foo.foo","title":"<code>foo(bar)</code>","text":"<p>Summary line.</p> <p>Extended description of function.</p> <p>Parameters:</p> Name Type Description Default <code>bar</code> <code>str</code> <p>Description of input argument.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Description of return value</p> Source code in <code>velum/foo.py</code> <pre><code>def foo(bar: str) -&gt; str:\n    \"\"\"Summary line.\n\n    Extended description of function.\n\n    Args:\n        bar: Description of input argument.\n\n    Returns:\n        Description of return value\n    \"\"\"\n\n    return bar\n</code></pre>"},{"location":"blog/","title":"Blog","text":""}]}